* Early Customization

#+BEGIN_SRC emacs-lisp
  (setq initial-frame-alist '((menu-bar-lines . 0)
                              (tool-bar-lines . 0)
                              (vertical-scroll-bars))
        default-frame-alist initial-frame-alist
        custom-file (expand-file-name "custom.el" user-emacs-directory))

  ;; Disable tab-bar mode. It's fucking useless.
  (tab-bar-mode -1)
#+END_SRC

* Custom Defuns

#+BEGIN_SRC emacs-lisp
  (defun insert-date ()
    (interactive)
    (insert (format-time-string "%a %b %e, %Y")))

  (defun insert-time ()
    (interactive)
    (insert (format-time-string "%I:%M:%S %z")))

  (defun insert-timestamp ()
    (interactive)
    (insert-date)
    (insert " ")
    (insert-time))

  (defun find-init-file ()
    (interactive)
    (find-file (expand-file-name "emacs-init.org" user-emacs-directory)))

  (defun find-notes-file ()
    (interactive)
    (find-file (expand-file-name "notes.org" org-directory)))

  (defun find-notes-index-file ()
    (interactive)
    (find-file (expand-file-name "index.org" org-directory)))

  (defun jtg:jump-to-or-start-term (ch)
    "Function to force the current window to switch to or restart the given term
  character."
    (interactive "c")
    (let* ((raw-buffer-name (format "ansiterm-%c" ch))
           (actual-buffer-name (concat "*" raw-buffer-name "*")))
      (if (member actual-buffer-name (mapcar 'buffer-name (buffer-list)))
          (switch-to-buffer actual-buffer-name)
        (ansi-term (getenv "SHELL") raw-buffer-name))))

  (defun jtg:toggle-term-mode ()
    "Toggle the current term's input method between char and line mode."
    (interactive)
    (if (term-in-line-mode)
        (term-char-mode)
      (term-line-mode)))
#+END_SRC

* Custom Keymap

#+begin_src emacs-lisp
    (bind-keys :prefix-map jtg:jump-map
	       :prefix-docstring "Personal keymap used for custom key definitions."
	       :prefix "C-c C-j"
	       ("g" . magit-status)
	       ("I" . find-init-file)
	       ("i" . find-notes-index-file)
	       ("n" . find-notes-file)
	       ("t" . jtg:jump-to-or-start-term))

  (use-package term
    :config
    (define-key term-raw-map (kbd "C-c C-k") #'jtg:toggle-term-mode)
    (define-key term-mode-map (kbd "C-c C-k") #'jtg:toggle-term-mode)
    (define-key term-raw-map (kbd "C-c C-j") #'jtg:jump-map))
#+end_src

* Theme

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure
    :init
    (powerline-center-theme)
    :config
    (setq powerline-default-separator 'butt)
    (powerline-center-theme))

  (load-theme 'googlex t)

  (set-face-font 'default "Envy Code R")
  (set-face-attribute 'default nil :height 131)
  (set-face-attribute 'default nil :inherit nil)
#+END_SRC

* Macos fixes

#+BEGIN_SRC emacs-lisp
    ;; Fix broken system-name on OS X
  (if (or (eq system-type 'darwin)
          (eq system-type 'berkeley-unix))
      (setq system-name (car (split-string system-name "\\."))))

  ;; Fix broken keyboard mappings
  (if (or (eq system-type 'darwin)
          (eq system-type 'berkeley-unix))
      (setq mac-command-key-is-meta t
            mac-command-modifier 'meta
            mac-option-modifier 'alt))
#+END_SRC

* Elisp hackery

#+begin_src elisp
  (require 'ansi-color)
  (defun jtg:display-ansi-colors ()
    (interactive)
    (ansi-color-apply-on-region (point-min) (point-max)))
#+end_src

** Set package URLs

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("gnu" . "http://elpa.gnu.org/packages/")))

  (use-package diminish
    :ensure
    :config
    (diminish 'abbrev-mode))
#+END_SRC

** Back to indentation or actual beginning-of-line

#+BEGIN_SRC emacs-lisp
  (defun beginning-of-line-dwim ()
  "Toggles between moving point to the first non-whitespace character, and
the start of the line."
  (interactive)
  (let ((start-position (point)))
    ;; Move to the first non-whitespace character.
    (back-to-indentation)
    
    ;; If we haven't moved position, go to start of the line.
    (when (= (point) start-position)
      (move-beginning-of-line nil))))
#+END_SRC

** Company Mode

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure
    :diminish company-mode)
  (global-company-mode)
#+END_SRC

** Uniqueify buffer names

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)

  (setq uniquify-buffer-name-style 'forward
        uniquify-separator "/"
        uniquify-after-kill-buffer-p t
        uniquify-ignore-buffers-re "^\\*")
#+END_SRC

* Key Bindings

#+BEGIN_SRC emacs-lisp
  (require 'bind-key)
  (require 'misc)

  (bind-keys ("M-\""  . insert-pair)
             ("M-'"   . insert-pair)
             ("M-["   . insert-pair)
             ("M-{"   . insert-pair)

             ("C-c C-'" . (lambda () (interactive) (insert "`")))
             ("C-c \"" . (lambda () (interactive) (insert "~")))

             ("C-c q" . auto-fill-mode)

             ("C-s"   . isearch-forward-regexp)
             ("C-r"   . isearch-backward-regexp)
             ("M-%"   . query-replace-regexp)

             ("M-SPC" . pop-to-mark-command)
             ("C-a"   . beginning-of-line-dwim)

             ("M-F"   . subword-forward)
             ("M-B"   . subword-backward)

             ("M-z"   . zap-up-to-char))

  ;; Disable suspend because suspend is fucking stupid
  (setq cannot-suspend t)
  (unbind-key "\C-z")
#+END_SRC

* Editing Settings

#+BEGIN_SRC emacs-lisp
  (setq-default indicate-empty-lines t
                indicate-buffer-boundaries t)
  (put 'narrow-to-region 'diabled nil)
  (global-auto-revert-mode t)
  (setq dired-find-subdir t)

  (setq-default fill-column 78
                column-number-mode 1
                confirm-kill-emacs 'y-or-n-p
                transient-mark-mode nil
                require-final-newline t
                scroll-conservatively 101
                truncate-lines t
                echo-keystrokes 0.1
                indent-tabs-mode nil
                tab-width 4)

  (setq parens-require-spaces nil
        diff-switches "-u"
        inhibit-splash-screen t
        visible-bell 1
        blink-cursor-blinks -1
        display-time-day-and-date t
        sentence-end-double-space nil)

  (display-time)
  (show-paren-mode t)
  (blink-cursor-mode t)
  (global-hl-line-mode)
  (prefer-coding-system 'utf-8)
  (add-hook 'text-mode-hook #'auto-fill-mode)
#+END_SRC

* Programming

** C style

#+BEGIN_SRC emacs-lisp
  (use-package google-c-style
    :ensure
    :config
    (add-hook 'c-mode-common-hook #'google-set-c-style)
    (add-hook 'c-mode-common-hook #'google-make-newline-indent))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure
    :init
    (require 'magit)
    (magit-auto-revert-mode t)
    (add-hook 'git-commit-mode-hook (lambda () (setq fill-column 70)))
    :diminish
    'magit-auto-revert-mode)

  (use-package magit-filenotify
    :ensure)
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure
    :diminish
    'projectile-mode
    :init
    (require 'projectile)
    (projectile-global-mode)
    :config
    (setq projectile-mode-line '(:eval (format " <%s>" (projectile-project-name))))
    (define-key projectile-mode-map (kbd "C-c C-p") 'projectile-command-map))
#+END_SRC

** Yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure
    :diminish
    yas-minor-mode
    :init
    (require 'yasnippet)
    (yas-global-mode 1))
#+END_SRC

** LSP Mode

#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :ensure
      :init
      (setq lsp-keymap-prefix "C-c C-l"
            read-process-output-max (* 1024 1024))
      (require 'lsp-mode)
      :config
      (add-hook 'c-mode-common-hook #'lsp))

    (use-package lsp-ui
      :ensure
      :commands lsp-ui-mode
      :hook (lsp-mode-hook . lsp-ui-mode)
      :custom
      (setq lsp-clients-clangd-args
            '("--header-insertion=never"))
      (lsp-ui-doc-enable t)
      (lsp-ui-doc-use-childframe nil)
      (lsp-ui-flycheck-enable t)
      (lsp-ui-flycheck-list-position 'right)
      (lsp-ui-flycheck-live-reporting t)
      (lsp-ui-peek-enable t)
      (lsp-ui-peek-list-width 60)
      (lsp-ui-peek-peek-height 25)
      (lsp-ui-doc-header t)
      (lsp-ui-doc-include-signature t)
      (lsp-ui-doc-position 'top)
      (lsp-ui-doc-border (face-foreground 'default))
      (lsp-ui-sideline-enable t)
      (lsp-ui-sideline-ignore-duplicate t)
      (lsp-ui-sideline-show-code-actions t))
#+END_SRC

** Editorconfig

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure
    :diminish
    editorconfig-mode
    :config
    (editorconfig-mode 1))
#+END_SRC

** Bazel

#+BEGIN_SRC emacs-lisp
  (use-package bazel
    :ensure)
#+END_SRC

** Protobuf

#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode
    :ensure)
#+END_SRC

** Logcat

#+begin_src emacs-lisp
  (use-package elogcat
    :ensure)
#+end_src

** Highlight Todos

#+begin_src emacs-lisp
    (use-package hl-todo
      :ensure
      :init
      (global-hl-todo-mode t)
      (setq hl-todo '((t (:bold t :inverse-video t)))))
#+end_src

* Emacs Behaviors

#+BEGIN_SRC emacs-lisp
    (setq savehist-additional-variables '(kill-ring
                                          search
                                          search-ring
                                          ring
                                          regexp-search-ring)
          savehist-autosave-interval 60
          savehist-save-minibuffer-history 1
          savehist-file (concat user-emacs-directory "savehist")
          history-length t
          history-delete-duplicates t)

    (savehist-mode t)

    (setq recentf-save-file (concat user-emacs-directory "recentf")
          recentf-max-saved-items 200
          recentf-max-menu-items 15)

    (recentf-mode t)

    ;; Don't GC the world until we've got enough garbage
    (setq gc-cons-threshold 100000000)

    ;; Fix tramp to use controlmaster
    (setq tramp-ssh-controlmaster-options
          (concat "-o ControlPath=~/.ssh/master-%%r@%%h:%%p "
                  "-o ControlMaster=auto "
                  "-o ControlPersist=15h ")
          enable-remote-dir-locals t)
#+END_SRC

* Org-mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure
    :mode ("\\.org$" . org-mode)
    :bind (("C-c c" . org-capture)
           ("C-c l" . org-store-link))
    :init
    (setq org-directory "~/notebook"
          org-default-notes-file "~/notebook/notes.org"
          org-enforce-todo-dependencies t
          org-display-custom-times t
          org-time-stamp-custom-formats '("<%m/%d/%y %a>" . "<%m/%d/%y %a %H:%M>")
          org-reverse-note-order t
          org-return-follows-link t
          org-src-lang-modes '(("elisp" . emacs-lisp))
          org-startup-folded 'content

          org-special-ctrl-a/e t
          org-special-ctrl-k t
          org-refile-use-outline-path 'file
          org-refile-allow-creating-parent-nodes 'confirm
          org-refile-targets '((org-agenda-files :maxlevel . 1)
                               (nil :maxlevel . 1))
          org-todo-keywords '((sequence "TODO" "STARTED(1)" "WAITING(@)"
                                        "DELEGATED(@)" "|" "DONE(!@)"
                                        "DEFERRED(!@)" "CANCELLED(!@)")))
    :config
    (require 'org-tempo)
    (require 'org-agenda)
    (add-hook 'org-mode-hook #'auto-fill-mode)
    (add-hook 'org-mode-hook #'flyspell-mode)
    (unbind-key "C-c C-j" org-mode-map))

  (use-package org-agenda
    :bind (("C-c C-j a" . org-agenda))
    :init
    (setq org-agenda-files '("~/notebook/agenda")
          org-agenda-text-search-extra-files (cl-concatenate 'list
                                                             (file-expand-wildcards "~/notebook/*.org")
                                                             (file-expand-wildcards "~/notebook/1:1/*.org"))
          org-agenda-restore-windows-after-quit t
          org-agenda-skip-deadline-if-done t
          org-agenda-skip-scheduled-if-done t
          org-agenda-start-on-weekday nil
          org-agenda-span 'week
          org-agenda-dim-blocked-tasks t
          org-agenda-custom-commands '(("d" "Delegated tasks" todo "DELEGATED" nil)
                                       ("c" "Completed tasks" todo "DONE|DEFERRED|CANCELLED" nil)
                                       ("w" "Blocked tasks" todo "WAITING" nil)
                                       ("W" "21-day view" agenda "" ((org-agenda-span 21)))
                                       ("A" "High priority tasks for today" agenda ""
                                        ((org-agenda-skip-function (lambda () (org-agenda-skip-entry-if 'notregexp "\\=.*\\[#A\\]")))
                                         (org-agenda-span 'day)
                                         (org-agenda-overriding-header "Today's Priority #A tasks: ")))
                                       ("S" "Last week's snippet" tags "TODO=\"DONE\"+CLOSED>=\"<-1w>\"|TODO=\"STARTED\""
                                        ((org-agenda-overriding-header "Last week's completed TODOs: ")))
                                       ("u" "Unscheduled tasks" alltodo ""
                                        ((org-agenda-skip-function (lambda () (org-agenda-skip-entry-if 'scheduled 'deadline 'regexp "<[^>\n]+>")))
                                         (org-agenda-overriding-header "Unscheduled TODO entries: "))))))
  
  (defvar jtg:current-1:1 nil
    "The name of the org file used for notes for the current 1:1.")

  (defun jtg:capture-1:1 (who)
    "Sets up a capture for a 1:1 meeting with a given person."
    (interactive "sWho: ")
    (setq jtg:current-1:1 (concat org-directory "/1:1/" who ".org"))
    (org-capture nil "1"))

  (use-package org-capture
    :bind (("C-c C-j c" . org-capture)
           ("C-c C-j 1" . jtg:capture-1:1))
    :init
    (setq org-capture-templates '(("t" "Todo" entry (file+headline "~/notebook/agenda/todo.org" "Unfiled Tasks") "* TODO %?\n%a\n%x\n")
                                  ("n" "Note" entry (file+olp+datetree "~/notebook/notes.org") "* %u %?" :tree-type week)
                                  ("1" "1:1"  entry (file+olp+datetree jtg:current-1:1) "* [%<%d-%b-%Y %H:%M] %?\n%i\n")
                                  ("g" "Glossary" item (file "~/notebook/glossary.org") "- %^{entry name} :: %?"))))
#+END_SRC
